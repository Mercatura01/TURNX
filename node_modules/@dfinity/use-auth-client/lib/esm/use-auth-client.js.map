{"version":3,"file":"use-auth-client.js","sourceRoot":"","sources":["../../src/use-auth-client.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  AuthClient,\n  type AuthClientCreateOptions,\n  type AuthClientLoginOptions,\n  type InternetIdentityAuthResponseSuccess,\n} from '@dfinity/auth-client';\nimport {\n  type Identity,\n  type Agent,\n  type HttpAgentOptions,\n  type ActorConfig,\n  HttpAgent,\n  Actor,\n  type ActorSubclass,\n} from '@dfinity/agent';\nimport type { IDL } from '@dfinity/candid';\nimport { Principal } from '@dfinity/principal';\n\nexport interface CreateActorOptions {\n  /**\n   * @see {@link Agent}\n   */\n  agent?: Agent;\n  /**\n   * @see {@link HttpAgentOptions}\n   */\n  agentOptions?: HttpAgentOptions;\n  /**\n   * @see {@link ActorConfig}\n   */\n  actorOptions?: ActorConfig;\n\n  idlFactory: IDL.InterfaceFactory;\n\n  canisterId: Principal | string;\n}\n\n/**\n * Options for the useAuthClient hook\n */\nexport type UseAuthClientOptions = {\n  createSync?: boolean;\n  /**\n   * Options passed during the creation of the auth client\n   */\n  createOptions?: Omit<AuthClientCreateOptions, 'loginOptions'>;\n  /**\n   * Options passed to the login method of the auth client\n   */\n  loginOptions?: AuthClientLoginOptions;\n  /**\n   * Options to create an actor using the auth client identity\n   */\n  actorOptions?: CreateActorOptions | Record<string, CreateActorOptions>;\n};\n\n/**\n * React hook to set up the Internet Computer auth client\n * @param options - configuration for the hook\n * @see {@link UseAuthClientOptions}\n */\nexport function useAuthClient(options?: UseAuthClientOptions) {\n  const [authClient, setAuthClient] = React.useState<AuthClient | null>(null);\n  const [identity, setIdentity] = React.useState<Identity | null>(null);\n  const [actor, setActor] = React.useState<ActorSubclass | null>();\n  const [actors, setActors] = React.useState<Record<string, ActorSubclass>>({});\n  const [isAuthenticated, setIsAuthenticated] = React.useState<boolean>(false);\n\n  // load the auth client on mount\n  React.useEffect(() => {\n    AuthClient.create({\n      ...options?.createOptions,\n      idleOptions: {\n        ...options?.createOptions?.idleOptions,\n        onIdle:\n          options?.createOptions?.idleOptions?.onIdle ??\n          (() => {\n            logout();\n          }),\n      },\n      loginOptions: options?.loginOptions,\n    }).then(async client => {\n      setAuthClient(client);\n      setIdentity(client.getIdentity());\n      setIsAuthenticated(await client.isAuthenticated());\n    });\n  }, []);\n\n  React.useEffect(() => {\n    if (identity && options?.actorOptions) {\n      // if the options is for a single actor, it will have a canisterId\n      if ('canisterId' in options.actorOptions) {\n        const createActorOptions = options.actorOptions as CreateActorOptions;\n        createActor({\n          ...createActorOptions,\n          agentOptions: { ...createActorOptions?.agentOptions, identity },\n        }).then(actor => {\n          // set the actor service\n\n          setActor(actor);\n        });\n      } else {\n        // if the options is for multiple actors, it will have a key value pair of an identifier and CreateActorOptions\n        const actorOptions = options.actorOptions as Record<string, CreateActorOptions>;\n        const actorPromises = Object.entries(actorOptions).map(\n          async ([canisterId, createActorOptions]) => {\n            const actor = await createActor({\n              ...createActorOptions,\n              agentOptions: { ...createActorOptions?.agentOptions, identity },\n            });\n            return [canisterId, actor];\n          },\n        );\n        Promise.all(actorPromises).then(actors => {\n          setActors(Object.fromEntries(actors));\n        });\n      }\n    }\n  }, [identity]);\n\n  /**\n   * Login through your configured identity provider\n   * Wraps the onSuccess and onError callbacks with promises for convenience\n   * @returns Returns a promise that resolves to the response from the identity provider\n   */\n  function login(): Promise<InternetIdentityAuthResponseSuccess | void> {\n    return new Promise((resolve, reject) => {\n      if (authClient) {\n        const callback = options?.loginOptions?.onSuccess;\n        const errorCb = options?.loginOptions?.onError;\n        authClient.login({\n          ...options?.loginOptions,\n          onSuccess: (successResponse?: InternetIdentityAuthResponseSuccess) => {\n            setIsAuthenticated(true);\n            setIdentity(authClient.getIdentity());\n            if (successResponse !== undefined) {\n              callback?.(successResponse);\n            } else {\n              (callback as () => void)?.();\n            }\n            resolve(successResponse);\n          },\n          onError: error => {\n            errorCb?.(error);\n            reject(error);\n          },\n        });\n      }\n    });\n  }\n\n  async function logout() {\n    if (authClient) {\n      setIsAuthenticated(false);\n      setIdentity(null);\n      await authClient.logout();\n      if (options?.actorOptions) {\n        if ('canisterId' in options.actorOptions) {\n          setActor(await createActor(options.actorOptions as CreateActorOptions));\n        } else {\n          const actorOptions = options.actorOptions as Record<string, CreateActorOptions>;\n          const actorPromises = Object.entries(actorOptions).map(\n            async ([canisterId, createActorOptions]) => {\n              // Initialize with anonymous identity\n              const actor = await createActor(createActorOptions);\n              return [canisterId, actor];\n            },\n          );\n          Promise.all(actorPromises).then(actors => {\n            setActors(Object.fromEntries(actors));\n          });\n        }\n      } else {\n        setActor(null);\n        setActors({});\n      }\n    }\n  }\n\n  return {\n    actor,\n    actors,\n    authClient,\n    identity,\n    isAuthenticated,\n    login,\n    logout,\n  };\n}\n\nconst createActor = async (options: CreateActorOptions) => {\n  const agent = options.agent || (await HttpAgent.create({ ...options.agentOptions }));\n\n  if (options.agent && options.agentOptions) {\n    console.warn(\n      'Detected both agent and agentOptions passed to createActor. Ignoring agentOptions and proceeding with the provided agent.',\n    );\n  }\n\n  // Fetch root key for certificate validation during development\n  if (process.env.DFX_NETWORK !== 'ic') {\n    agent.fetchRootKey().catch(err => {\n      console.warn('Unable to fetch root key. Check to ensure that your local replica is running');\n      console.error(err);\n    });\n  }\n\n  // Creates an actor with using the candid interface and the HttpAgent\n  return Actor.createActor(options.idlFactory, {\n    agent,\n    canisterId: options.canisterId,\n    ...options.actorOptions,\n  });\n};\n"]}