import { AuthClient, type AuthClientCreateOptions, type AuthClientLoginOptions, type InternetIdentityAuthResponseSuccess } from '@dfinity/auth-client';
import { type Identity, type Agent, type HttpAgentOptions, type ActorConfig, type ActorSubclass } from '@dfinity/agent';
import type { IDL } from '@dfinity/candid';
import { Principal } from '@dfinity/principal';
export interface CreateActorOptions {
    /**
     * @see {@link Agent}
     */
    agent?: Agent;
    /**
     * @see {@link HttpAgentOptions}
     */
    agentOptions?: HttpAgentOptions;
    /**
     * @see {@link ActorConfig}
     */
    actorOptions?: ActorConfig;
    idlFactory: IDL.InterfaceFactory;
    canisterId: Principal | string;
}
/**
 * Options for the useAuthClient hook
 */
export type UseAuthClientOptions = {
    createSync?: boolean;
    /**
     * Options passed during the creation of the auth client
     */
    createOptions?: Omit<AuthClientCreateOptions, 'loginOptions'>;
    /**
     * Options passed to the login method of the auth client
     */
    loginOptions?: AuthClientLoginOptions;
    /**
     * Options to create an actor using the auth client identity
     */
    actorOptions?: CreateActorOptions | Record<string, CreateActorOptions>;
};
/**
 * React hook to set up the Internet Computer auth client
 * @param options - configuration for the hook
 * @see {@link UseAuthClientOptions}
 */
export declare function useAuthClient(options?: UseAuthClientOptions): {
    actor: ActorSubclass | null | undefined;
    actors: Record<string, ActorSubclass>;
    authClient: AuthClient | null;
    identity: Identity | null;
    isAuthenticated: boolean;
    login: () => Promise<InternetIdentityAuthResponseSuccess | void>;
    logout: () => Promise<void>;
};
