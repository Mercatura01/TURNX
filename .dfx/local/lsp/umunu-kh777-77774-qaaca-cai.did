type UserRole = 
 variant {
   admin;
   guest;
   user;
 };
type UserProfile = record {name: text;};
type UserInfo = 
 record {
   approval: ApprovalStatus;
   "principal": principal;
   role: UserRole;
 };
type TurnServerUsage = 
 record {
   serverUrl: text;
   sessionId: text;
   timestamp: Time;
   user: principal;
 };
type TurnProvider = 
 record {
   attestationHash: opt text;
   id: text;
   isActive: bool;
   isVerified: bool;
   lastSeen: Time;
   location: text;
   name: text;
   owner: principal;
   publicKey: text;
   rating: float64;
   reputation: float64;
   securityScore: nat;
   stakeAmount: nat;
   totalEarnings: float64;
   totalSessions: nat;
   uptime: float64;
   url: text;
 };
type Time = int;
type Room = 
 record {
   code: text;
   createdAt: Time;
   createdBy: principal;
   id: text;
   isActive: bool;
   link: text;
   maxParticipants: nat;
   name: text;
   participants: vec principal;
 };
type ChatMessage = 
 record {
   id: text;
   message: text;
   roomId: text;
   timestamp: Time;
   user: principal;
 };
type BillingRecord = 
 record {
   costPerMinute: float64;
   durationMinutes: float64;
   endTime: Time;
   protocolFee: float64;
   providerEarnings: float64;
   providerId: text;
   sessionId: text;
   startTime: Time;
   totalCost: float64;
   user: principal;
 };
type ApprovalStatus = 
 variant {
   approved;
   pending;
   rejected;
 };
service : {
  assignRole: (user: principal, newRole: UserRole) -> ();
  createRoom: (name: text, maxParticipants: nat) -> (Room);
  getAllRooms: () -> (vec Room) query;
  getAllTurnProviders: () -> (vec TurnProvider) query;
  getAllTurnServerUsages: () -> (vec TurnServerUsage) query;
  getApprovalStatus: () -> (ApprovalStatus) query;
  getBillingRecords: () -> (vec BillingRecord) query;
  getCurrentUserRole: () -> (UserRole) query;
  getRoomMessages: (roomId: text) -> (vec ChatMessage) query;
  getTurnServerUsage: (sessionId: text) -> (opt TurnServerUsage) query;
  getUserProfile: () -> (opt UserProfile) query;
  initializeAuth: () -> ();
  isCurrentUserAdmin: () -> (bool) query;
  listUsers: () -> (vec UserInfo) query;
  logTurnServerUsage: (serverUrl: text, sessionId: text) -> ();
  recordBilling: (sessionId: text, providerId: text, startTime: Time,
   endTime: Time, costPerMinute: float64) -> ();
  registerTurnProvider: (id: text, name: text, url: text, publicKey: 
   text, attestationHash: opt text, stakeAmount: nat, location: text) -> ();
  saveUserProfile: (profile: UserProfile) -> ();
  sendMessage: (roomId: text, message: text) -> ();
  setApproval: (user: principal, approval: ApprovalStatus) -> ();
}
